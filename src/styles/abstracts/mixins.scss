@import "./variables";
@import "./colors";

@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
}

@mixin media-breakpoint-down($breakpoint, $breakpoints: $media-sizes) {
  @if index(map-keys($breakpoints), $breakpoint) {
    $normalizedBreakpoint: map-get($breakpoints, $breakpoint);
    @media (max-width: $normalizedBreakpoint) {
      @content;
    }
  } @else {
    @error "Значение #{$breakpoint} должно находиться в массиве!";
  }
}

@mixin media-breakpoint-up($breakpoint, $breakpoints: $media-sizes) {
  @if index(map-keys($breakpoints), $breakpoint) {
    $normalizedBreakpoint: map-get($breakpoints, $breakpoint);
    @media (min-width: $normalizedBreakpoint + 1) {
      @content;
    }
  } @else {
    @error "Значение #{$breakpoint} должно находиться в массиве!";
  }
}

@mixin media-breakpoint-between(
  $breakpointStart,
  $breakpointEnd,
  $breakpoints: $media-sizes
) {
  @if not(index(map-keys($breakpoints), $breakpointEnd)) {
    @error "Значение #{$breakpointStart} должно находиться в массиве!";
  } @else if not(index(map-keys($breakpoints), $breakpointEnd)) {
    @error "Значение #{$breakpointEnd} должно находиться в массиве!";
  } @else {
    $normalizedBreakpointStart: map-get($breakpoints, $breakpointStart);
    $normalizedBreakpointEnd: map-get($breakpoints, $breakpointEnd);

    @if ($normalizedBreakpointStart >= $normalizedBreakpointEnd) {
      @error "Стартовая точка ограничения должна быть меньше конечной!";
    } @else {
      @media (min-width: $normalizedBreakpointStart + 1) and (max-width: $normalizedBreakpointEnd) {
        @content;
      }
    }
  }
}

@mixin transition($transitions...) {
  $transition_result: ();
  @each $transition in $transitions {
    $transition_result: append(
      $transition_result,
      $transition $transition-main,
      comma
    );
  }
  transition: $transition_result;
}

@mixin adaptiveDefaultGap($negative, $margins...) {
  @if $negative {
    $negative: "-";
  } @else {
    $negative: "";
  }

  @each $margin in $margins {
    #{$margin}: #{$negative}#{$grid-gap-small};

    @include media-breakpoint-up(xxxs) {
      #{$margin}: #{$negative}$grid-gap;
    }
  }
}

@mixin trbl($arguments...) {
  @if (length($arguments) == 1) {
    top: $arguments;
    right: $arguments;
    bottom: $arguments;
    left: $arguments;
  }
}

@mixin flex($type: "center") {
  display: flex;
  align-items: center;

  @if $type == "center" {
    justify-content: center;
  } @else if $type == "between" {
    justify-content: space-between;
  }
}

@mixin fontFaceSelectorGenerator($family, $url, $weight, $style: normal) {
  @font-face {
    font-family: $family;
    src: url("#{$url}.woff2") format("woff2"),
      url("#{$url}.woff") format("woff");
    font-weight: $weight;
    font-style: $style;
  }
}

@mixin fontFaceGenerator($families) {
  $basePath: "/assets/fonts";

  @each $familyCode, $familyProps in $families {
    $familyTypes: map-get($familyProps, "familyTypes");
    @each $type, $typeProps in $familyTypes {
      $family: map-get($familyProps, "family");
      $familyPath: map-get($familyProps, "path");
      $path: "#{$basePath}#{$familyPath}";
      $weight: map-get($typeProps, "weight");
      $url: "#{$path}#{$familyCode}-#{$type}";

      $styles: map-get($typeProps, "styles");

      @include fontFaceSelectorGenerator($family, $url, $weight);

      @if ($styles) {
        @each $style in $styles {
          @include fontFaceSelectorGenerator($family, $url, $weight, $style);
        }
      }
    }
  }
}

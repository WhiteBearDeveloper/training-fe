@import "./variables";
@import "./colors";

@mixin placeholder {
  /* stylelint-disable selector-pseudo-element-no-unknown */
  &::input-placeholder {
    @content;
  }
  /* stylelint-enable selector-pseudo-element-no-unknown */

  &:placeholder {
    @content;
  }

  &::placeholder {
    @content;
  }

  &:input-placeholder {
    @content;
  }
}

@mixin media-breakpoint-down($breakpoint, $breakpoints: $media-sizes) {
  @if index(map-keys($breakpoints), $breakpoint) {
    $normalized-breakpoint: map-get($breakpoints, $breakpoint);
    @media (max-width: $normalized-breakpoint) {
      @content;
    }
  } @else {
    @error "Значение #{$breakpoint} должно находиться в массиве!";
  }
}

@mixin media-breakpoint-up($breakpoint, $breakpoints: $media-sizes) {
  @if index(map-keys($breakpoints), $breakpoint) {
    $normalized-breakpoint: map-get($breakpoints, $breakpoint);
    @media (min-width: ($normalized-breakpoint + 1)) {
      @content;
    }
  } @else {
    @error "Значение #{$breakpoint} должно находиться в массиве!";
  }
}

@mixin media-breakpoint-between(
  $breakpoint-start,
  $breakpoint-end,
  $breakpoints: $media-sizes
) {
  @if not(index(map-keys($breakpoints), $breakpoint-end)) {
    @error "Значение #{$breakpoint-start} должно находиться в массиве!";
  } @else if not(index(map-keys($breakpoints), $breakpoint-end)) {
    @error "Значение #{$breakpoint-end} должно находиться в массиве!";
  } @else {
    $normalized-breakpoint-start: map-get($breakpoints, $breakpoint-start);
    $normalized-breakpoint-end: map-get($breakpoints, $breakpoint-end);

    @if ($normalized-breakpoint-start >= $normalized-breakpoint-end) {
      @error "Стартовая точка ограничения должна быть меньше конечной!";
    } @else {
      @media (min-width: ($normalized-breakpoint-start + 1)) and (max-width: $normalized-breakpoint-end) {
        @content;
      }
    }
  }
}

@mixin transition($transitions...) {
  $transition-result: ();
  @each $transition in $transitions {
    $transition-result: append($transition-result,
    $transition $transition-main,
    comma);
  }
  transition: $transition-result;
}

@mixin adaptive-default-gap($negative, $margins...) {
  @if $negative {
    $negative: "-";
  } @else {
    $negative: "";
  }

  @each $margin in $margins {
    #{$margin}: #{$negative}#{$grid-gap-small};

    @include media-breakpoint-up(xxs) {
      #{$margin}: #{$negative}$grid-gap;
    }
  }
}

@mixin trbl($arguments...) {
  @if (length($arguments) == 1) {
    bottom: $arguments;
    left: $arguments;
    right: $arguments;
    top: $arguments;
  }
}

@mixin flex($type: "center") {
  align-items: center;
  display: flex;

  @if $type == "center" {
    justify-content: center;
  } @else if $type == "between" {
    justify-content: space-between;
  }
}

@mixin font-face-selector-generator($family, $url, $weight, $style: normal) {
  @font-face {
    font-family: $family;
    font-style: $style;
    font-weight: $weight;
    src: url("#{$url}.woff2") format("woff2"),
      url("#{$url}.woff") format("woff");
  }
}

@mixin font-face-generator($families) {
  $base-path: "/assets/fonts";

  @each $family-code, $family-props in $families {
    $family-types: map-get($family-props, "family-types");
    @each $type, $type-props in $family-types {
      $family: map-get($family-props, "family");
      $family-path: map-get($family-props, "path");
      $path: "#{$$base-path}#{$family-path}";
      $weight: map-get($type-props, "weight");
      $url: "#{$path}#{$family-code}-#{$type}";

      $styles: map-get($type-props, "styles");

      @include font-face-selector-generator($family, $url, $weight);

      @if ($styles) {
        @each $style in $styles {
          @include font-face-selector-generator($family, $url, $weight, $style);
        }
      }
    }
  }
}
